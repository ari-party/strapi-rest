import type { BaseOptions } from '../types/baseFunction';
import type { RequestResponse } from '../types/request';
import combineUrl from '../utils/combineUrl.js';
import request from '../utils/request.js';

export interface Filters {
  /** Equal */
  $eq?: string;
  /** Equal (case-insensitive) */
  $eqi?: string;

  /** Not equal */
  $ne?: string;
  /** Not equal (case-insensitive) */
  $nei?: string;

  /** Less than */
  $lt?: string;
  /** Less than or equal to */
  $lte?: string;

  /** Greater than */
  $gt?: string;
  /** Greater than or equal to */
  $gte?: string;

  /** Included in an array */
  $in?: string;
  /** Not included in an array */
  $notIn?: string;

  /** Contains */
  $contains?: string;
  /** Does not contain */
  $notContains?: string;
  /** Contains (case-insensitive) */
  $containsi?: string;
  /** Does not contain (case-insensitive) */
  $notContainsi?: string;

  /** Is null */
  $null?: string;
  /** Is not null */
  $notNull?: string;

  /** Is between */
  $between?: string;

  /** Starts with */
  $startsWith?: string;
  /** Starts with (case-insensitive) */
  $startsWithi?: string;

  /** Ends with */
  $endsWith?: string;
  /** Ends with (case-insensitive) */
  $endsWithi?: string;

  /** Joins the filters in an "or" expression */
  $or?: Filters[];
  /** Joins the filters in an "and" expression */
  $and?: Filters[];
  /** Joins the filters in an "not" expression */
  $not?: Filters[];
}

export interface Pagination {
  start?: number;
  limit?: number;
  page?: number;
  pageSize?: number;
  withCount?: boolean;
}

export interface Parameters {
  /** @link https://docs.strapi.io/dev-docs/api/rest/populate-select#population */
  populate?: string | object;

  /** @link https://docs.strapi.io/dev-docs/api/rest/populate-select#field-selection */
  fields?: string[];

  /**
   * By default, the filters can only be used from find endpoints generated by the Content-type Builder and the CLI.
   * @link https://docs.strapi.io/dev-docs/api/rest/filters-locale-publication#filtering
   */
  filters?: Filters;

  /** @link https://docs.strapi.io/dev-docs/api/rest/filters-locale-publication#locale */
  locale?: string | string[];

  /**
   * @default live
   * @link https://docs.strapi.io/dev-docs/api/rest/filters-locale-publication#publication-state
   */
  publicationState?: 'live' | 'default';

  sort?: string | string[];

  /** @link https://docs.strapi.io/dev-docs/api/rest/sort-pagination#pagination */
  pagination?: Pagination;
}

export interface Options extends BaseOptions {
  /**
   * The API ID of the collection type
   */
  collection: string;

  parameters?: Parameters;
}

/**
 * @link https://docs.strapi.io/dev-docs/api/rest#get-entries
 */
export default async function getEntries<T>(
  options: Options,
): Promise<RequestResponse<Array<T | Record<string, unknown>>>> {
  const response = await request({
    method: 'GET',
    url: combineUrl(options.apiUrl, options.collection),
    token: options.token,
    parameters: options.parameters as Record<string, unknown>,
  });

  if (response.error) throw new Error(JSON.stringify(response.error));
  return response as RequestResponse<Array<T | Record<string, unknown>>>;
}
